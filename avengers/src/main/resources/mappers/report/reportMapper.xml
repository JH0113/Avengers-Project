<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.reportMapper">

<select id="countProd" resultType="int">
	select count(*) from PROD_REPORTED
</select>


<select id="countMem" resultType="int">
	select count(*) from MEM_REPORTED
</select>


<select id="reportList" resultType="model.ReportDTO" parameterType="model.ReportDTO">
	select rn, reportedNum, reporter, memId, reportedReason, reportedReasonDetail, prodNum, reportDate, reportState
    from
    (select rownum rn, reportedNum, reporter, memId, reportedReason, reportedReasonDetail, prodNum, reportDate, reportState
	from
		(select 1, REPORTED_NUM reportedNum, REPORTER reporter, MEM_ID memId, REPORTED_REASON reportedReason, 
				   REPORTED_REASON_DETAIL reportedReasonDetail, PROD_NUM prodNum, REPORTDATE reportDate, REPORT_STATE reportState
		from PROD_REPORTED
	union
		select 1, REPORTED_NUM, REPORTER, MEM_ID, REPORTED_REASON, REPORTED_REASON_DETAIL, 0, REPORTDATE reportDate, REPORT_STATE reportState
		from mem_reported )order by reportDate desc)
	where rn between #{startEndPageDTO.startRow} and #{startEndPageDTO.endRow}  		
</select>
 

<sql id="search">
        <choose>
            <when test="search_option == 'all' ">
                where (reportedNum like '%' ||#{keyword}||'%'
                    or reporter like '%'||#{keyword}||'%'
                    or memId like '%'||#{keyword}||'%' )           
            </when>
            <otherwise>
                where ${search_option} like '%'||#{keyword}||'%'           
            </otherwise>
        </choose>
</sql>


<select id="searchList" resultType="model.ReportDTO"> 
     
     select rn, reportedNum, reporter, memId, reportedReason, reportedReasonDetail, prodNum, reportDate, reportState
    from
    (select rownum rn, reportedNum, reporter, memId, reportedReason, reportedReasonDetail, prodNum, reportDate, reportState
	from
		(select 1, REPORTED_NUM reportedNum, REPORTER reporter, MEM_ID memId, REPORTED_REASON reportedReason, 
				   REPORTED_REASON_DETAIL reportedReasonDetail, PROD_NUM prodNum, REPORTDATE reportDate, REPORT_STATE reportState
		from PROD_REPORTED
	union
		select 1, REPORTED_NUM, REPORTER, MEM_ID, REPORTED_REASON, REPORTED_REASON_DETAIL, 0, REPORTDATE reportDate, REPORT_STATE reportState
		from mem_reported )order by reportDate desc)
	<include refid="search" />  
</select>




<select id="reportDetail" parameterType="string" resultType="model.ReportDTO">
 	select reportedNum, reporter, memId, reportedReason, reportedReasonDetail, prodNum, reportDate, reportState
	from
		(select REPORTED_NUM reportedNum, REPORTER reporter, MEM_ID memId, REPORTED_REASON reportedReason, 
				REPORTED_REASON_DETAIL reportedReasonDetail, PROD_NUM prodNum, REPORTDATE reportDate, REPORT_STATE reportState
		from PROD_REPORTED
	union
		select REPORTED_NUM, REPORTER, MEM_ID, REPORTED_REASON, REPORTED_REASON_DETAIL, 0, REPORTDATE reportDate, REPORT_STATE reportState
		from mem_reported )
	where reportedNum = #{reportedNum} 
</select>

<insert id="reportFinishInsert" parameterType="model.ReportFinishDTO">
	insert into REPORT_FINISH
	(REPORTED_NUM, PROD_NUM, MEM_ID, REPORTER, EMP_ID, REPORTED_REASON, REPORTED_REASON_DETAIL, REPORTDATE, REPORTFINISHDATE, REPORT_STATE)
	values
	(#{reportedNum},#{prodNum},#{memId},#{reporter},#{empId},#{reportedReason},#{reportedReasonDetail},
	(select REPORTDATE from mem_reported where REPORTED_NUM=#{reportedNum}
         union
     select REPORTDATE from prod_reported where REPORTED_NUM=#{reportedNum}),sysdate,1)
</insert>

<update id="reportMemberCountUp" parameterType="string">
	update member 
	set MEM_REPORTED_COUNT = MEM_REPORTED_COUNT + 1
	where MEM_ID = #{memId}
</update>

<update id="reportCompletedMember" parameterType="string">
	update mem_reported 
	set REPORT_STATE = 1
	where REPORTED_NUM = #{reportedNum}
</update>

<update id="reportCompletedProd" parameterType="string">
	update prod_reported 
	set REPORT_STATE = 1
	where REPORTED_NUM = #{reportedNum}
</update>

<insert id="reportCancelInsert" parameterType="model.ReportFinishDTO">
	insert into REPORT_FINISH
	(REPORTED_NUM, PROD_NUM, MEM_ID, REPORTER, EMP_ID, REPORTED_REASON, REPORTED_REASON_DETAIL, REPORTDATE, REPORTFINISHDATE, REPORT_STATE)
	values
	(#{reportedNum},#{prodNum},#{memId},#{reporter},#{empId},#{reportedReason},#{reportedReasonDetail},
	(select REPORTDATE from mem_reported where REPORTED_NUM=#{reportedNum}
         union
     select REPORTDATE from prod_reported where REPORTED_NUM=#{reportedNum}),sysdate,2)
     		
</insert>


<select id="reportFinishDetail" parameterType="string" resultType="model.ReportFinishDTO">
	select REPORTED_NUM reportedNum, PROD_NUM prodNum, MEM_ID memId, REPORTER reporter, EMP_ID empId, REPORTED_REASON reportedReason,
		   REPORTED_REASON_DETAIL reportedReasonDetail,REPORTDATE reportDate,REPORTFINISHDATE reportFinishDate, REPORT_STATE reportState
	from report_finish where REPORTED_NUM = #{reportNum}
</select>

<!-- 
<select id="getMemId" parameterType="string" resultType="string">
	select mem_id
	from products
	where PROD_NUM=#{prodNum}
</select>
 -->
</mapper>